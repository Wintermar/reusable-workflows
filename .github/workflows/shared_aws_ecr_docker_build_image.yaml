# Required secrets:
# - AWS_ACCOUNT_ID
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
---
on:
  workflow_call:
    inputs:
      AWS_ACCOUNT_ID:
        type: string
        required: true
      AWS_ACCESS_KEY_ID:
        type: string
        required: true
      AWS_SECRET_ACCESS_KEY:
        type: string
        required: true
      AWS_REGION:
        type: string
        required: true
        description: "The AWS Region you want to interact with."
      DOCKERFILE:
        type: string
        required: true
        description: "The Dockerfile location you want to build."
      AWS_ECR_REGISTRY:
        type: string
        required: true
        description: "The AWS ECR Registry name you want to push the built images."
      ENABLE_BUILD_PUSH:
        type: boolean
        default: true
        description: "Toggle enable/disable image built push image, e.g. you can disable for CI test image build."
      ENABLE_CACHE_PUSH:
        type: boolean
        default: true
        description: "Toogle enable/disable image built cache push image."
      ENABLE_SSM_PARAMETER_STORE_ENV_FILE:
        type: boolean
        default: true
        description: "Toogle enable/disable to generate .env file from AWS SSM Parameter Store prefix."
      SSM_PARAMETER_STORE_PREFIX:
        type: string
        required: true
        description: "The AWS SSM Parameter Store prefix you want to use to generate .env file, e.g. /your-company/user-service/env/"
      DOCKER_IMAGE_TAG:
        type: string
        required: true
        description: "The Docker image tag you want to build."
      DOCkER_IMAGE_CACHE_TAG:
        type: string
        required: true
        description: "The Docker image cache tag."
      DOCKER_IMAGE_STEP_TARGET_TO_CACHE:
        type: string
        required: true

env:
  DOCKER_BUILDKIT: 1
  SCRIPTS_URL: https://github.com/Wintermar/reusable-workflows/blob/main/scripts

jobs:
  DockerBuildx:
    runs-on: [onboard-docker-runner-standalone]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2.15.16
          verbose: false
          arch: amd64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ inputs.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ inputs.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate .env file from AWS SSM Parameter Store
        if: ${{ inputs.ENABLE_SSM_PARAMETER_STORE_ENV_FILE == true }}
        run: |
          wget ${{ env.SCRIPTS_URL }}/aws_ssm_generate_env_file.sh -O aws_ssm_generate_env_file.sh
          chmod a+x aws_ssm_generate_env_file.sh
          ./aws_ssm_generate_env_file.sh ${{ inputs.SSM_PARAMETER_STORE_PREFIX }}

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ${{ inputs.DOCKERFILE }}
          push: ${{ inputs.ENABLE_BUILD_PUSH }}
          tags: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REGISTRY }}:${{ inputs.DOCKER_IMAGE_TAG }}
          cache-from: type=registry,ref=${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REGISTRY }}:cache-${{ inputs.DOCkER_IMAGE_CACHE_TAG }}

      - name: Save Docker image cache
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ${{ inputs.DOCKERFILE }}
          target: ${{ inputs.DOCKER_IMAGE_STEP_TARGET_TO_CACHE }}
          push: ${{ inputs.ENABLE_CACHE_PUSH }}
          build-args: BUILDKIT_INLINE_CACHE=1
          tags: ${{ inputs.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.AWS_ECR_REGISTRY }}:cache-${{ inputs.DOCkER_IMAGE_CACHE_TAG }}
